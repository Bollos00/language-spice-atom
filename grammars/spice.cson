#
# The MIT License (MIT)
#
# Copyright (c) 2020 Bollos00
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

name: 'SPICE'
scopeName: 'source.spice'
fileTypes: [
	'cir'
	'sp'
	'spice'
]
firstLineMatch: ''

# Important notes:
# (?mi):
#		(?...) - Signalize the mode of the regular expression
#		m - Multiple line (one line treated at time) that way
#		 the string begin on the beginning of the line
#		i - Insensitive Case
#	(?:...) - non-capturing groups

# Possible options to test later:
#		change 'variable.other.node.spice' -> 'markup.underline.spice'
#		change 'variable.language.spice' -> 'markup.italic.spice'

patterns: [
	#
	# Title and comments
	#
	{ # Comments
		match: '(?m)(?:^\\*|\\$|\\;).*$'
		name: 'comment.line.spice'
	}
	{ # First line for the title
		match: '^(\\A.*)'
		name: 'markup.bold.title.spice'
	}
	#
	# Numbers
	#
	{ # Numbers on SPICE
		match: '(?i)\\b(?:(?:[0-9]+\\.[0-9]+|\\.[0-9]+|[0-9]+)' +
		       '(?:t|g|meg|k|m|mil|u|n|p|f|e' +
				 '(?:\\+|\\-|)(?:[0-9]+\\.[0-9]+|\\.[0-9]+|[0-9]+)|))\\b'
		name: 'constant.numeric.spice'
	}
	#
	# SPICE elements
	#
	{ # SPICE elements with two nodes
		match: '(?mi)(^(?:B|C|D|I|L|R|V)[a-z0-9_]+)([ \\t]+[a-z0-9_]+[ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # SPICE elements with three nodes
		match: '(?mi)(^(?:J|Q|U|Z)[a-z0-9_]+)([ \\t]+[a-z0-9_]+[ \\t]+[a-z0-9_]+[ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # SPICE elements with four nodes
	  # Note: MOSFETs can have two or three nodes, depending on the model
		match: '(?mi)(^(?:E|F|G|H|M|O|S|T|S|Y)[a-z0-9_]+)([ \\t]+[a-z0-9_]+[ \\t]+[a-z0-9_]+[ \\t]+[a-z0-9_]+[ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # Subcircuit declaration
		match: '(?mi)(^X[a-z0-9_]+)((?:[ \\t]+[a-z0-9_]+)+)([ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'variable.other.node.spice'
			3:
				name: 'variable.parameter.spice'
	}
	#
	# Dot (.) Commands declaration
	#
	{ # Subcircuit
		match: '(?mi)(^\\.subckt)([ \\t][a-z0-9_]+[ \\t])(.*$)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'variable.other.node.spice'
	}
	{ # macro
		match: '(?mi)(^\\.macro)([ \\t][a-z0-9_]+[ \\t])(.*$)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'variable.other.node.spice'
	}
	{ # model
		match:  '(?mi)^(\\.model)([ \\t]+[a-z0-9_]+)([ \\t]+(?:R|C|L|SW|CSW|URC|LTRA|D|NPN|PNP|NJF|PJF|NMOS|PMOS|NMF|PMF|VDMOS))'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'variable.language.spice'
	}
	{ # global
		match: '(?mi)^(\\.global)((?:[ \\t]+[a-z0-9_]+)+)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'variable.other.node.spice'
	}
	{ # include
		match: '(?mi)^(\\.include)[ \\t]+(.*)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'string.unquoted.spice'
	}
	{ # lib
		match: '(?mi)^(\\.lib)[ \\t]+(.+)([ \\t]+[a-z0-9_]+)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'string.unquoted.spice'
			3:
				name: 'variable.parameter.spice'
	}
	{ # param
		match: '(?mi)(^\\.param)(?:[ \\t]+)([a-z_][a-z0-9_]*)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'variable.parameter.spice'
	}
	{ # func
		match: '(?mi)(^\\.func)(?:[ \\t]+)([a-z_][a-z0-9_]*)'
		captures:
			1:
				name: 'keyword.control.spice'
			2:
				name: 'variable.parameter.spice'
	}

	# TODO: .DC .OP .AC ...
	# TODO: .CSPARAM
	# TODO: .IF .ELSEIF .ELSE .ENDIF
	{ # Other dot commands
		match:
			'(?mi)^(?:\\.control|\\.csparam|\\.end|\\.endc|\\.endif|\\.endm|\\.ends|\\.four|' +
			'\\.meas|\\.measure|\\.options|\\.param|\\.plot|\\.print|\\.probe|\\.temp|' +
			'\\.save|\\.with|\\.op|\\.ac|\\.dc|\\.tran)\\b'
		name: 'keyword.control.spice'
	}
	#
	# Symbolic keywords
	#
	{
		match: '(?i)(?:\\+|\\-|\\=|\\(|\\)|\\{|\\}|\\,|\\!|\\*\\*|\\^|\\*|\\/|\\%|\\\\|\\=\\=|' +
				 '\\!\\=|\\<\\=|\\>\\=|\\<|\\>|\\&\\&|\\|\\||\\?|\\:)'
		name: 'keyword.operator.spice'
	}
	#
	# SPICE keywords
	#
	{
		match: '(?i)(?:\\b(?:tran|ac|dc|sp)\\b)'
		name: 'keyword.control.spice'
	}
	{
		match: '(?i)(?:\\b(?:dec|oct|lin)\\b)'
		name: 'keyword.control.spice'
	}
	{
		match: '(?i)(?:\\b(?:AVG|MIN|MAX|PP|RMS|MIN_AT|MAX_AT)\\b)'
		name: 'keyword.control.spice'
	}
	#
	# SPICE functions
	#
	{ # let
		match: '(?mi)^(let)[ \\t]+([a-z0-9_]+)[ \\t]+(\=)'
		captures:
			1:
				name: 'entity.name.function.spice'
			2:
				name: 'variable.parameter.spice'
			3:
				name: 'keyword.operator.spice'
			# 4:
			# 	name: ''
	}
	{ # v(node)
		match: '(?i)(v)(\\()(?:[ \\t]*)([a-z0-9_]+)(?:[ \\t]*)(?:[ \\t]*)(\\))'
		captures:
			1:
				name: 'entity.name.function.spice'
			2:
				name: 'keyword.operator.spice'
			3:
				name: 'variable.other.node.spice'
			4:
				name: 'keyword.operator.spice'
	}
	{ # v(node, node)
		match: '(?i)(v)(\\()(?:[ \\t]*)([a-z0-9_]+)(?:[ \\t]*)(\\,)(?:[ \\t]*)([a-z0-9_]+)(?:[ \\t]*)(\\))'
		captures:
			1:
				name: 'entity.name.function.spice'
			2:
				name: 'keyword.operator.spice'
			3:
				name: 'variable.other.node.spice'
			4:
				name: 'keyword.operator.spice'
			5:
				name: 'variable.other.node.spice'
			6:
				name: 'keyword.operator.spice'
	}
	{ # Current of voltage source v****#branch
		match: '(?i)(v[a-z0-0_]+)(#branch)'
		captures:
			1:
				name: 'variable.language.spice'
			2:
				name: 'keyword.operator.spice'
	}
	{ # Other SPICE functions
		match:
			'(?i)\\b(?:run|sqrt|sin|cos|tan|sinh|cosh|tanh|asin|acos|atan|' +
			'asinh|acosh|atanh|arctan|exp|ln|log|abs|nint|int|floor|ceil|pow|' +
			'pwr|min|max|sgn)\\b'
		name: 'entity.name.function.spice'
	}
	#
	# TODO: Interactive ngspice Interpreter functions
	#
	{

	}
	#
	# SPICE strings
	#
	{
		match: '(?mi)(?:\\\'(.+)\\\')'
		name: 'string.quoted.single.spice'
	}
	{
		match: '(?mi)(?:\\\"(.+)\\\")'
		name: 'string.quoted.double.spice'
	}

]
